import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import io.orkes.conductor.client.model.WorkflowSchedule
import org.junit.jupiter.api.Test
import static org.junit.jupiter.api.Assertions.*

class TestSerDerWorkflowSchedule {

    @Test
    fun testSerializeDeserialize() {
        val serverJSON = """{"updatedTime":123,"paused":true,"updatedBy":"sample_updatedBy","description":"sample_description","pausedReason":"sample_pausedReason","runCatchupScheduleInstances":true,"tags":[{"type":"sample_type","value":"sample_value","key":"sample_key"}],"scheduleStartTime":123,"cronExpression":"sample_cronExpression","startWorkflowRequest":{"input":{"sample_key":"sample_value"},"externalInputPayloadStoragePath":"sample_externalInputPayloadStoragePath","createdBy":"sample_createdBy","name":"sample_name","correlationId":"sample_correlationId","taskToDomain":{"sample_key":"sample_value"},"priority":123,"version":123,"workflowDef":{"workflowStatusListenerSink":"sample_workflowStatusListenerSink","variables":{"sample_key":"sample_value"},"schemaVersion":123,"timeoutPolicy":{"values":["TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(1)","TIME_OUT_WF":"(0)"},"sampleValue":"TIME_OUT_WF"},"outputSchema":{"data":{"sample_key":"sample_value"},"name":"sample_name","type":"SchemaDef.Type","version":123,"externalRef":"sample_externalRef"},"enforceSchema":true,"restartable":true,"inputSchema":{"data":{"sample_key":"sample_value"},"name":"sample_name","type":"SchemaDef.Type","version":123,"externalRef":"sample_externalRef"},"description":"sample_description","version":123,"inputParameters":["sample_inputParameters"],"inputTemplate":{"sample_key":"sample_value"},"workflowStatusListenerEnabled":true,"ownerEmail":"sample_ownerEmail","rateLimitConfig":{"concurrentExecLimit":123,"rateLimitKey":"sample_rateLimitKey"},"name":"sample_name","timeoutSeconds":123,"failureWorkflow":"sample_failureWorkflow","tasks":[{"joinOn":["sample_joinOn"],"description":"sample_description","scriptExpression":"sample_scriptExpression","cacheConfig":{"key":"sample_key","ttlInSecond":123},"type":"sample_type","inputParameters":{"sample_key":"sample_value"},"decisionCases":{"sample_key":[{"joinOn":["sample_joinOn"],"description":"sample_description","scriptExpression":"sample_scriptExpression","cacheConfig":{"key":"sample_key","ttlInSecond":123},"type":"sample_type","inputParameters":{"sample_key":"sample_value"},"decisionCases":{},"loopOver":[],"caseExpression":"sample_caseExpression","defaultExclusiveJoinTask":["sample_defaultExclusiveJoinTask"],"taskDefinition":{"timeoutPolicy":{"values":["RETRY","TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(2)","TIME_OUT_WF":"(1)","RETRY":"(0)"},"sampleValue":"RETRY"},"inputKeys":["sample_inputKeys"],"concurrentExecLimit":123,"isolationGroupId":"sample_isolationGroupId","retryCount":123,"description":"sample_description","inputTemplate":{"sample_key":"sample_value"},"ownerEmail":"sample_ownerEmail","baseType":"sample_baseType","totalTimeoutSeconds":123,"retryDelaySeconds":123,"backoffScaleFactor":123,"rateLimitPerFrequency":123,"retryLogic":{"values":["FIXED","EXPONENTIAL_BACKOFF","LINEAR_BACKOFF"],"constants":{"EXPONENTIAL_BACKOFF":"(1)","FIXED":"(0)","LINEAR_BACKOFF":"(2)"},"sampleValue":"FIXED"},"responseTimeoutSeconds":123,"name":"sample_name","timeoutSeconds":123,"rateLimitFrequencyInSeconds":123,"outputKeys":["sample_outputKeys"],"executionNameSpace":"sample_executionNameSpace","pollTimeoutSeconds":123},"caseValueParam":"sample_caseValueParam","dynamicForkTasksInputParamName":"sample_dynamicForkTasksInputParamName","expression":"sample_expression","loopCondition":"sample_loopCondition","asyncComplete":true,"sink":"sample_sink","rateLimited":true,"retryCount":123,"subWorkflowParam":{"workflowDefinition":"sample_workflowDefinition","idempotencyKey":"sample_idempotencyKey","name":"sample_name","taskToDomain":{"sample_key":"sample_value"},"priority":"sample_object_priority","version":123,"idempotencyStrategy":{"values":["FAIL","RETURN_EXISTING","FAIL_ON_RUNNING"],"constants":{"FAIL_ON_RUNNING":"(2)","RETURN_EXISTING":"(1)","FAIL":"(0)"},"sampleValue":"FAIL"}},"optional":true,"joinStatus":"sample_joinStatus","evaluatorType":"sample_evaluatorType","dynamicTaskNameParam":"sample_dynamicTaskNameParam","name":"sample_name","startDelay":123,"permissive":true,"taskReferenceName":"sample_taskReferenceName","defaultCase":[],"forkTasks":[[]],"dynamicForkTasksParam":"sample_dynamicForkTasksParam"}]},"loopOver":[{"joinOn":["sample_joinOn"],"description":"sample_description","scriptExpression":"sample_scriptExpression","cacheConfig":{"key":"sample_key","ttlInSecond":123},"type":"sample_type","inputParameters":{"sample_key":"sample_value"},"decisionCases":{},"loopOver":[],"caseExpression":"sample_caseExpression","defaultExclusiveJoinTask":["sample_defaultExclusiveJoinTask"],"taskDefinition":{"timeoutPolicy":{"values":["RETRY","TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(2)","TIME_OUT_WF":"(1)","RETRY":"(0)"},"sampleValue":"RETRY"},"inputKeys":["sample_inputKeys"],"concurrentExecLimit":123,"isolationGroupId":"sample_isolationGroupId","retryCount":123,"description":"sample_description","inputTemplate":{"sample_key":"sample_value"},"ownerEmail":"sample_ownerEmail","baseType":"sample_baseType","totalTimeoutSeconds":123,"retryDelaySeconds":123,"backoffScaleFactor":123,"rateLimitPerFrequency":123,"retryLogic":{"values":["FIXED","EXPONENTIAL_BACKOFF","LINEAR_BACKOFF"],"constants":{"EXPONENTIAL_BACKOFF":"(1)","FIXED":"(0)","LINEAR_BACKOFF":"(2)"},"sampleValue":"FIXED"},"responseTimeoutSeconds":123,"name":"sample_name","timeoutSeconds":123,"rateLimitFrequencyInSeconds":123,"outputKeys":["sample_outputKeys"],"executionNameSpace":"sample_executionNameSpace","pollTimeoutSeconds":123},"caseValueParam":"sample_caseValueParam","dynamicForkTasksInputParamName":"sample_dynamicForkTasksInputParamName","expression":"sample_expression","loopCondition":"sample_loopCondition","asyncComplete":true,"sink":"sample_sink","rateLimited":true,"retryCount":123,"subWorkflowParam":{"workflowDefinition":"sample_workflowDefinition","idempotencyKey":"sample_idempotencyKey","name":"sample_name","taskToDomain":{"sample_key":"sample_value"},"priority":"sample_object_priority","version":123,"idempotencyStrategy":{"values":["FAIL","RETURN_EXISTING","FAIL_ON_RUNNING"],"constants":{"FAIL_ON_RUNNING":"(2)","RETURN_EXISTING":"(1)","FAIL":"(0)"},"sampleValue":"FAIL"}},"optional":true,"joinStatus":"sample_joinStatus","evaluatorType":"sample_evaluatorType","dynamicTaskNameParam":"sample_dynamicTaskNameParam","name":"sample_name","startDelay":123,"permissive":true,"taskReferenceName":"sample_taskReferenceName","defaultCase":[],"forkTasks":[[]],"dynamicForkTasksParam":"sample_dynamicForkTasksParam"}],"caseExpression":"sample_caseExpression","defaultExclusiveJoinTask":["sample_defaultExclusiveJoinTask"],"taskDefinition":{"timeoutPolicy":{"values":["RETRY","TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(2)","TIME_OUT_WF":"(1)","RETRY":"(0)"},"sampleValue":"RETRY"},"inputKeys":["sample_inputKeys"],"concurrentExecLimit":123,"isolationGroupId":"sample_isolationGroupId","retryCount":123,"description":"sample_description","inputTemplate":{"sample_key":"sample_value"},"ownerEmail":"sample_ownerEmail","baseType":"sample_baseType","totalTimeoutSeconds":123,"retryDelaySeconds":123,"backoffScaleFactor":123,"rateLimitPerFrequency":123,"retryLogic":{"values":["FIXED","EXPONENTIAL_BACKOFF","LINEAR_BACKOFF"],"constants":{"EXPONENTIAL_BACKOFF":"(1)","FIXED":"(0)","LINEAR_BACKOFF":"(2)"},"sampleValue":"FIXED"},"responseTimeoutSeconds":123,"name":"sample_name","timeoutSeconds":123,"rateLimitFrequencyInSeconds":123,"outputKeys":["sample_outputKeys"],"executionNameSpace":"sample_executionNameSpace","pollTimeoutSeconds":123},"caseValueParam":"sample_caseValueParam","dynamicForkTasksInputParamName":"sample_dynamicForkTasksInputParamName","expression":"sample_expression","loopCondition":"sample_loopCondition","asyncComplete":true,"sink":"sample_sink","rateLimited":true,"retryCount":123,"subWorkflowParam":{"workflowDefinition":"sample_workflowDefinition","idempotencyKey":"sample_idempotencyKey","name":"sample_name","taskToDomain":{"sample_key":"sample_value"},"priority":"sample_object_priority","version":123,"idempotencyStrategy":{"values":["FAIL","RETURN_EXISTING","FAIL_ON_RUNNING"],"constants":{"FAIL_ON_RUNNING":"(2)","RETURN_EXISTING":"(1)","FAIL":"(0)"},"sampleValue":"FAIL"}},"optional":true,"joinStatus":"sample_joinStatus","evaluatorType":"sample_evaluatorType","dynamicTaskNameParam":"sample_dynamicTaskNameParam","name":"sample_name","startDelay":123,"permissive":true,"taskReferenceName":"sample_taskReferenceName","defaultCase":[{"joinOn":["sample_joinOn"],"description":"sample_description","scriptExpression":"sample_scriptExpression","cacheConfig":{"key":"sample_key","ttlInSecond":123},"type":"sample_type","inputParameters":{"sample_key":"sample_value"},"decisionCases":{},"loopOver":[],"caseExpression":"sample_caseExpression","defaultExclusiveJoinTask":["sample_defaultExclusiveJoinTask"],"taskDefinition":{"timeoutPolicy":{"values":["RETRY","TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(2)","TIME_OUT_WF":"(1)","RETRY":"(0)"},"sampleValue":"RETRY"},"inputKeys":["sample_inputKeys"],"concurrentExecLimit":123,"isolationGroupId":"sample_isolationGroupId","retryCount":123,"description":"sample_description","inputTemplate":{"sample_key":"sample_value"},"ownerEmail":"sample_ownerEmail","baseType":"sample_baseType","totalTimeoutSeconds":123,"retryDelaySeconds":123,"backoffScaleFactor":123,"rateLimitPerFrequency":123,"retryLogic":{"values":["FIXED","EXPONENTIAL_BACKOFF","LINEAR_BACKOFF"],"constants":{"EXPONENTIAL_BACKOFF":"(1)","FIXED":"(0)","LINEAR_BACKOFF":"(2)"},"sampleValue":"FIXED"},"responseTimeoutSeconds":123,"name":"sample_name","timeoutSeconds":123,"rateLimitFrequencyInSeconds":123,"outputKeys":["sample_outputKeys"],"executionNameSpace":"sample_executionNameSpace","pollTimeoutSeconds":123},"caseValueParam":"sample_caseValueParam","dynamicForkTasksInputParamName":"sample_dynamicForkTasksInputParamName","expression":"sample_expression","loopCondition":"sample_loopCondition","asyncComplete":true,"sink":"sample_sink","rateLimited":true,"retryCount":123,"subWorkflowParam":{"workflowDefinition":"sample_workflowDefinition","idempotencyKey":"sample_idempotencyKey","name":"sample_name","taskToDomain":{"sample_key":"sample_value"},"priority":"sample_object_priority","version":123,"idempotencyStrategy":{"values":["FAIL","RETURN_EXISTING","FAIL_ON_RUNNING"],"constants":{"FAIL_ON_RUNNING":"(2)","RETURN_EXISTING":"(1)","FAIL":"(0)"},"sampleValue":"FAIL"}},"optional":true,"joinStatus":"sample_joinStatus","evaluatorType":"sample_evaluatorType","dynamicTaskNameParam":"sample_dynamicTaskNameParam","name":"sample_name","startDelay":123,"permissive":true,"taskReferenceName":"sample_taskReferenceName","defaultCase":[],"forkTasks":[[]],"dynamicForkTasksParam":"sample_dynamicForkTasksParam"}],"forkTasks":[[{"joinOn":["sample_joinOn"],"description":"sample_description","scriptExpression":"sample_scriptExpression","cacheConfig":{"key":"sample_key","ttlInSecond":123},"type":"sample_type","inputParameters":{"sample_key":"sample_value"},"decisionCases":{},"loopOver":[],"caseExpression":"sample_caseExpression","defaultExclusiveJoinTask":["sample_defaultExclusiveJoinTask"],"taskDefinition":{"timeoutPolicy":{"values":["RETRY","TIME_OUT_WF","ALERT_ONLY"],"constants":{"ALERT_ONLY":"(2)","TIME_OUT_WF":"(1)","RETRY":"(0)"},"sampleValue":"RETRY"},"inputKeys":["sample_inputKeys"],"concurrentExecLimit":123,"isolationGroupId":"sample_isolationGroupId","retryCount":123,"description":"sample_description","inputTemplate":{"sample_key":"sample_value"},"ownerEmail":"sample_ownerEmail","baseType":"sample_baseType","totalTimeoutSeconds":123,"retryDelaySeconds":123,"backoffScaleFactor":123,"rateLimitPerFrequency":123,"retryLogic":{"values":["FIXED","EXPONENTIAL_BACKOFF","LINEAR_BACKOFF"],"constants":{"EXPONENTIAL_BACKOFF":"(1)","FIXED":"(0)","LINEAR_BACKOFF":"(2)"},"sampleValue":"FIXED"},"responseTimeoutSeconds":123,"name":"sample_name","timeoutSeconds":123,"rateLimitFrequencyInSeconds":123,"outputKeys":["sample_outputKeys"],"executionNameSpace":"sample_executionNameSpace","pollTimeoutSeconds":123},"caseValueParam":"sample_caseValueParam","dynamicForkTasksInputParamName":"sample_dynamicForkTasksInputParamName","expression":"sample_expression","loopCondition":"sample_loopCondition","asyncComplete":true,"sink":"sample_sink","rateLimited":true,"retryCount":123,"subWorkflowParam":{"workflowDefinition":"sample_workflowDefinition","idempotencyKey":"sample_idempotencyKey","name":"sample_name","taskToDomain":{"sample_key":"sample_value"},"priority":"sample_object_priority","version":123,"idempotencyStrategy":{"values":["FAIL","RETURN_EXISTING","FAIL_ON_RUNNING"],"constants":{"FAIL_ON_RUNNING":"(2)","RETURN_EXISTING":"(1)","FAIL":"(0)"},"sampleValue":"FAIL"}},"optional":true,"joinStatus":"sample_joinStatus","evaluatorType":"sample_evaluatorType","dynamicTaskNameParam":"sample_dynamicTaskNameParam","name":"sample_name","startDelay":123,"permissive":true,"taskReferenceName":"sample_taskReferenceName","defaultCase":[],"forkTasks":[[]],"dynamicForkTasksParam":"sample_dynamicForkTasksParam"}]],"dynamicForkTasksParam":"sample_dynamicForkTasksParam"}],"outputParameters":{"sample_key":"sample_value"}}},"createTime":123,"createdBy":"sample_createdBy","name":"sample_name","zoneId":"sample_zoneId","scheduleEndTime":123}"""

        val mapper = ObjectMapper()
        val schedule = mapper.readValue(serverJSON, WorkflowSchedule::class.java)
        assertNotNull(schedule)
        assertEquals(123L, schedule.createTime)
        assertEquals("sample_createdBy", schedule.createdBy)
        assertEquals("sample_cronExpression", schedule.cronExpression)
        assertEquals("sample_name", schedule.name)
        assertTrue(schedule.paused)
        assertTrue(schedule.runCatchupScheduleInstances)
        assertEquals(123L, schedule.scheduleEndTime)
        assertEquals(123L, schedule.scheduleStartTime)
        assertNotNull(schedule.startWorkflowRequest)
        assertEquals("sample_externalInputPayloadStoragePath", schedule.startWorkflowRequest.externalInputPayloadStoragePath)
        assertEquals("sample_createdBy", schedule.startWorkflowRequest.createdBy)
        assertEquals("sample_name", schedule.startWorkflowRequest.name)
        assertEquals("sample_correlationId", schedule.startWorkflowRequest.correlationId)
        assertEquals("sample_value", schedule.startWorkflowRequest.input["sample_key"])
        assertEquals("sample_value", schedule.startWorkflowRequest.taskToDomain["sample_key"])
        assertEquals(123, schedule.startWorkflowRequest.priority)
        assertEquals(123, schedule.startWorkflowRequest.version)
        assertNotNull(schedule.startWorkflowRequest.workflowDef)
        assertEquals("sample_workflowStatusListenerSink", schedule.startWorkflowRequest.workflowDef.workflowStatusListenerSink)
        assertEquals("sample_value", schedule.startWorkflowRequest.workflowDef.variables["sample_key"])
        assertEquals(123, schedule.startWorkflowRequest.workflowDef.schemaVersion)
        assertEquals("TIME_OUT_WF", schedule.startWorkflowRequest.workflowDef.timeoutPolicy.sampleValue)
        assertEquals("sample_name", schedule.startWorkflowRequest.workflowDef.outputSchema.name)
        assertTrue(schedule.startWorkflowRequest.workflowDef.enforceSchema)
        assertTrue(schedule.startWorkflowRequest.workflowDef.restartable)
        assertEquals("sample_name", schedule.startWorkflowRequest.workflowDef.inputSchema.name)
        assertEquals("sample_description", schedule.startWorkflowRequest.workflowDef.description)
        assertEquals(123, schedule.startWorkflowRequest.workflowDef.version)
        assertEquals(listOf("sample_inputParameters"), schedule.startWorkflowRequest.workflowDef.inputParameters)
        assertEquals("sample_value", schedule.startWorkflowRequest.workflowDef.inputTemplate["sample_key"])
        assertTrue(schedule.startWorkflowRequest.workflowDef.workflowStatusListenerEnabled)
        assertEquals("sample_ownerEmail", schedule.startWorkflowRequest.workflowDef.ownerEmail)
        assertEquals(123, schedule.startWorkflowRequest.workflowDef.rateLimitConfig.concurrentExecLimit)
        assertEquals("sample_rateLimitKey", schedule.startWorkflowRequest.workflowDef.rateLimitConfig.rateLimitKey)
        assertEquals("sample_name", schedule.startWorkflowRequest.workflowDef.name)
        assertEquals(123, schedule.startWorkflowRequest.workflowDef.timeoutSeconds)
        assertEquals("sample_failureWorkflow", schedule.startWorkflowRequest.workflowDef.failureWorkflow)
        // Further assertions should be added here for nested fields, maps, lists, and enums as needed

        val serializedJSON = mapper.writeValueAsString(schedule)
        val originalJson = mapper.readTree(serverJSON)
        val serializedJson = mapper.readTree(serializedJSON)
        assertEquals(originalJson, serializedJson)
    }
}